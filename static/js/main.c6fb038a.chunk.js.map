{"version":3,"sources":["tileData.js","App.js","serviceWorker.js","index.js"],"names":["img","title","link","useStyles","makeStyles","theme","root","display","flexWrap","justifyContent","overflow","backgroundColor","palette","background","paper","position","paddingTop","paddingBottom","gridList","width","maxWidth","height","zIndex","fontSize","color","App","classes","className","GridList","cellHeight","GridListTile","key","cols","style","marginBottom","ListSubheader","component","tileData","map","tile","Link","href","target","src","alt","GridListTileBar","actionIcon","IconButton","aria-label","icon","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qSAAe,GACb,CACEA,IAAK,wBACLC,MAAO,kBACPC,KAAM,mCAER,CACEF,IAAK,eACLC,MAAO,QACPC,KAAM,0DAER,CACEF,IAAK,wBACLC,MAAO,YACPC,KAAM,6BAER,CACEF,IAAK,qBACLC,MAAO,SACPC,KAAM,uBAER,CACEF,IAAK,aACLC,MAAO,eACPC,KAAM,8BAER,CACEF,IAAK,0BACLC,MAAO,iFACPC,KAAM,0CAER,CACEF,IAAK,cACLC,MAAO,gBACPC,KAAM,8BAER,CACEF,IAAK,wCACLC,MAAO,qBACPC,KAAM,mCAER,CACEF,IAAK,gBACLC,MAAO,SACPC,KAAM,sBAER,CACEF,IAAK,cACLC,MAAO,UACPC,KAAM,0BAER,CACEF,IAAK,aACLC,MAAO,WACPC,KAAM,yBAER,CACEF,IAAK,SACLC,MAAO,YACPC,KAAM,yBAER,CACEF,IAAK,gCACLC,MAAO,WACPC,KAAM,yBAER,CACEF,IAAK,aACLC,MAAO,UACPC,KAAM,wBAER,CACEF,IAAK,sBACLC,MAAO,SACPC,KAAM,qBAER,CACEF,IAAK,mBACLC,MAAO,YACPC,KAAM,2BCnEJC,G,MAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,QAAS,OACTC,SAAU,OACVC,eAAgB,eAChBC,SAAU,SACVC,gBAAiBN,EAAMO,QAAQC,WAAWC,MAC1CC,SAAU,WACVC,WAAY,GACZC,cAAe,IAEjBC,SAAU,CACRC,MAAO,OACPC,SAAU,KAEZlB,KAAM,CACJa,SAAU,WACVI,MAAO,OACPE,OAAQ,OACRC,OAAQ,GAEVrB,MAAO,CACLsB,SAAU,GACVC,MAAO,gBAwCIC,MApCf,WACE,IAAMC,EAAUvB,IAChB,OACE,yBAAKwB,UAAU,OACb,yBAAKA,UAAWD,EAAQpB,MACtB,kBAACsB,EAAA,EAAD,CAAUC,WAAY,IAAKF,UAAWD,EAAQR,UAC5C,kBAACY,EAAA,EAAD,CACEC,IAAI,YACJC,KAAM,EACNC,MAAO,CAAEZ,OAAQ,OAAQa,aAAc,KAEvC,kBAACC,EAAA,EAAD,CAAeR,UAAWD,EAAQzB,MAAOmC,UAAU,OAAnD,2DAIDC,EAASC,KAAI,SAACC,GAAD,OACZ,kBAACT,EAAA,EAAD,CAAcC,IAAKQ,EAAKvC,KACtB,kBAACwC,EAAA,EAAD,CAAMC,KAAMF,EAAKrC,KAAMwC,OAAO,SAASf,UAAWD,EAAQxB,OAC1D,yBAAKyC,IAAKJ,EAAKvC,IAAK4C,IAAKL,EAAKtC,QAC9B,kBAAC4C,EAAA,EAAD,CACE5C,MAAOsC,EAAKtC,MACZ6C,WACE,kBAACC,EAAA,EAAD,CACEC,aAAA,qBAA0BT,EAAKtC,OAC/B0B,UAAWD,EAAQuB,iBCnDnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c6fb038a.chunk.js","sourcesContent":["export default [\n  {\n    img: \"podrias-necesitar.jpg\",\n    title: \"Detectivesprive\",\n    link: \"https://detectivesprive.com/es/\",\n  },\n  {\n    img: \"unnamed.webp\",\n    title: \"MAFIN\",\n    link: \"https://play.google.com/store/apps/details?id=com.smb2\",\n  },\n  {\n    img: \"Glazunova_027-min.jpg\",\n    title: \"Karlikova\",\n    link: \"https://karlikova.com.ua/\",\n  },\n  {\n    img: \"itlama-quality.jpg\",\n    title: \"Itlama\",\n    link: \"https://itlama.com/\",\n  },\n  {\n    img: \"header.png\",\n    title: \"Loyaltyforum\",\n    link: \"https://loyaltyforum.info/\",\n  },\n  {\n    img: \"icona_vintage_1_bk.webp\",\n    title: \"Delonghi (в разработке)\",\n    link: \"https://delonghi-test.firebaseapp.com/\",\n  },\n  {\n    img: \"slide_2.jpg\",\n    title: \"Highleveltour\",\n    link: \"https://highleveltour.com/\",\n  },\n  {\n    img: \"ingineeringovaya_rabota_desktop_r.jpg\",\n    title: \"Atlant Engineering\",\n    link: \"https://atlant-engineering.com/\",\n  },\n  {\n    img: \"practice2.png\",\n    title: \"Morgun\",\n    link: \"https://morgun.ua/\",\n  },\n  {\n    img: \"slide-1.jpg\",\n    title: \"Drweber\",\n    link: \"http://drweber.com.ua/\",\n  },\n  {\n    img: \"bg_img.jpg\",\n    title: \"Doodviza\",\n    link: \"https://goodviza.com/\",\n  },\n  {\n    img: \"5.jpeg\",\n    title: \"Vrata msk\",\n    link: \"https://vrata-msk.ru/\",\n  },\n  {\n    img: \"mesyachnyh-posle-klimaksa.jpg\",\n    title: \"Herbalee\",\n    link: \"https://herbalee.net/\",\n  },\n  {\n    img: \"page_t.jpg\",\n    title: \"Prokavu\",\n    link: \"https://prokavu.com/\",\n  },\n  {\n    img: \"achievements_bg.jpg\",\n    title: \"Ecoteh\",\n    link: \"http://ecoteh.ua/\",\n  },\n  {\n    img: \"1486843478_3.jpg\",\n    title: \"Nervmedex\",\n    link: \"https://nervmedex.com/\",\n  },\n];\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport GridList from \"@material-ui/core/GridList\";\nimport GridListTile from \"@material-ui/core/GridListTile\";\nimport GridListTileBar from \"@material-ui/core/GridListTileBar\";\nimport ListSubheader from \"@material-ui/core/ListSubheader\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport InfoIcon from \"@material-ui/icons/Info\";\nimport Link from \"@material-ui/core/Link\";\nimport tileData from \"./tileData\";\nimport \"./App.css\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: \"space-around\",\n    overflow: \"hidden\",\n    backgroundColor: theme.palette.background.paper,\n    position: \"relative\",\n    paddingTop: 30,\n    paddingBottom: 30,\n  },\n  gridList: {\n    width: \"100%\",\n    maxWidth: 1000,\n  },\n  link: {\n    position: \"absolute\",\n    width: \"100%\",\n    height: \"100%\",\n    zIndex: 3,\n  },\n  title: {\n    fontSize: 28,\n    color: \"#000000\",\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  return (\n    <div className=\"App\">\n      <div className={classes.root}>\n        <GridList cellHeight={200} className={classes.gridList}>\n          <GridListTile\n            key=\"Subheader\"\n            cols={2}\n            style={{ height: \"auto\", marginBottom: 20 }}\n          >\n            <ListSubheader className={classes.title} component=\"div\">\n              Портфолио\n            </ListSubheader>\n          </GridListTile>\n          {tileData.map((tile) => (\n            <GridListTile key={tile.img}>\n              <Link href={tile.link} target=\"_blank\" className={classes.link} />\n              <img src={tile.img} alt={tile.title} />\n              <GridListTileBar\n                title={tile.title}\n                actionIcon={\n                  <IconButton\n                    aria-label={`info about ${tile.title}`}\n                    className={classes.icon}\n                  ></IconButton>\n                }\n              />\n            </GridListTile>\n          ))}\n        </GridList>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}